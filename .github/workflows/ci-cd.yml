name: 'Inventory-Service CI/CD Pipeline'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      - name: Configure Artifactory for Python
        run: |
          jfrog pipc --repo-resolve=bookverse-pypi-local

      - name: Install Python dependencies with JFrog CLI
        run: |
          jfrog pip install -r requirements.txt

      - name: Set Unique SemVer Version
        id: set_version
        run: |
          VERSION="1.3.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Push Backend Image
        run: |
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||')
          IMAGE_TAG="$REGISTRY_URL/bookverse-docker-internal/${{ github.event.repository.name }}-backend:${{ steps.set_version.outputs.VERSION }}"
          jfrog docker build --pull -t $IMAGE_TAG \
            --build-arg JFROG_URL=${{ vars.JFROG_URL }} \
            --build-arg JFROG_USER=${{ vars.JFROG_USER }} \
            --build-arg JFROG_ACCESS_TOKEN=${{ secrets.JFROG_ACCESS_TOKEN }} \
            -f Dockerfile.backend .
          jfrog rt dp $IMAGE_TAG bookverse-docker-internal --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

      - name: Build and Push Frontend Image
        run: |
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||')
          IMAGE_TAG="$REGISTRY_URL/bookverse-docker-internal/${{ github.event.repository.name }}-frontend:${{ steps.set_version.outputs.VERSION }}"
          jfrog docker build --pull -t $IMAGE_TAG -f Dockerfile.frontend .
          jfrog rt dp $IMAGE_TAG bookverse-docker-internal --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

      - name: Collect Git information for Build Info
        run: |
          jfrog rt bag ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Collect Environment Variables for Build Info
        run: |
          jfrog rt bce ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Publish Build Info
        run: |
          jfrog rt bp ${{ github.event.repository.name }} ${{ github.run_number }}

      - name: Create Microservice Release Bundle
        run: |
          jfrog rbc ${{ github.event.repository.name }} ${{ steps.set_version.outputs.VERSION }} --project=bookverse --build-name=${{ github.event.repository.name }} --build-number=${{ github.run_number }}

          cat <<EOF > build-link-evidence.json
          {
            "builder": { "id": "uri:github-actions" },
            "runId": { "workflow_run_id": "${{ github.run_id }}" }
          }
          EOF

      - name: Create and Attach Build Link Evidence
        run: |
          cat <<EOF > private_rsa.pem
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCbTIE7ygQbxWgg
dyPbPx2GTq2Lkg2spM6PevI0V/hVcwMZ714W9eqjg/nbdTthYj0yo1D4B6Y6j2tT
H4z/5UjflBOVO0y5gB+xJzro99J4p0jFYTRY0MKVS2HeBRVJv0ghGUXpE30Sa/kB
7kAme00LqdQtT2RbmZDzHAK0RovjyaUfwYpuAlcH/dD65BQXcQcDl5tVwluEEr2B
757ZfngHbQM1N7QHfqo6edY4GT7tfai+091rlNNTMYI+nvleXkmd+hPOvTSomOat
lh8UWjnVM8zYenBhm+/OxAc90mZXszQitgIjGJZfM1OVI2tuRyeXmi5Wb7h3s6Yi
Q61XeBTzAgMBAAECggEAA0Pui7VJtNPHxrb6mAeRtVs+JushQnoMpdOt+A/JdvJ+
JDN2RQFSt7F0tXqXjwqjwsbQUwbGJgER/qNxMYg+qgTRDJg8msHo6K6sfG2JjWPn
Ec9jbGKnVMBLBIIS2oQdHiUL5US1ooeGqtW5n5WEHzSo83Lx50MpWxNBs0ywcE+q
siNZ4JTyswnDP6MiA8+E7qqdUJ6Cb94EUf5vZgrivOKHNbJIfHdWiwMNMNl9zv8u
+ydB75FhAEumONcAVFb37lR91knzFQ1bqrFC0rcbUeJ8T2sTz5qIdogmTxi0xPfZ
MKZjQsuLPFr+9U8HvMlN68GqwbG+YR7z3jVbQL23kQKBgQDXel6lDXnnngdWyEfD
QBHGeOFHhBEA/mkiDFATKhMZqmyLLefVaOv6STBxWDqWkU9sSRknUi+ncIR96dFN
PBvN57HY3i3A5YWpQOogt0hYVoUXfDh+Xq7+LrQLH72DZuDXbQubIJDQ0qytd7lZ
hsNMigOlOWiaK8ZhcEHXhVVkLwKBgQC4gPckjbWG0wbFvAOsEWu/NPe5ZTtgBoHQ
9gpLUV0ayIRaQznp/5S6pw0qL/+ahZw4T2pA6BsgbYQMyT5oQxY32SEvper4l4WL
cPVHkFtxGgcaEbBwlaAFHqXvn+/Bj7tL5ayl9EMHVR8c9Iuv2TPXI/UvsBHhM4dH
c7r3/E/2fQKBgQC8sQ4cX1a3Oy2WE0C0fHCUatpsM/xn8GHETR/6CEg9m339yy9P
NNggjuL6/pYfsBPq8YAzbMcKS3/ae1yr081NXG3jSXyrhNKtSok8KQQTR4C49jDK
iMOZFvDXJO5iGT8fpwAY0kW+eB56sXMAMQDpD5rtnv44s8i/HvypbLtARQKBgQCV
Jwyj7Ds3RxlOeHOvglXMORGaOpAJTLldJ8mioZ/WqwrzvSzwUcD2M12dIThMvn5P
t0N6PSjQyjfZ7kYZG0K22zzMvCB73mIDG8ntlHGXuSbMmEg+e3blLKWQVYcIvxz2
ejFb517YaqPAUKEsAza5UURAzOFnYLSXuqMHHl22MQKBgAU2r/Fw+dnqQW02D0Rv
sg8ExdW4U7edGDWXmZSC7+sPYZvuZBLk/1mphLhlJ1qxiZ0hSyC4rJnMb3o2GqP7
b+n5HUrj7ehJc3x6N0uarv+v4P4TQwNukvK3MmiWu/ZFAOabTjQBZkDh+YfxlAhk
y1pxEmYyVwaw9jWff+NvsyxG
-----END PRIVATE KEY-----
          EOF
          jfrog evd create --predicate build-link-evidence.json --predicate-type https://in-toto.io/attestation/link/v0.3 --release-bundle inventory-service --release-bundle-version 1.3.79 --key-alias bookverse_rsa --key ${{ secrets.RSA_PRIVATE }} 

  promote-bundle:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"

      - name: Create and Attach Commit Review Evidence (Pre-DEV Gate)
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat <<EOF > commit-review.json
          {
            "predicate_type": "https://in-toto.io/attestation/scai/attribute-report",
            "predicate": {
              "attributes": [
                { "name": "committer", "value": "${{ github.actor }}" },
                { "name": "reviewer", "value": "code-owner@bookverse.com" },
                { "name": "review_status", "value": "Approved" },
                { "name": "review_date", "value": "$timestamp" }
              ]
            }
          }
          EOF
          SUBJECT_PATH="bookverse-docker-internal/${{ github.event.repository.name }}-backend/${{ needs.build-and-publish.outputs.version }}/manifest.json.evd"
          curl -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d @commit-review.json \
               "${{ vars.JFROG_URL }}/evidence/api/v1/subject/${SUBJECT_PATH}"

      - name: Promote to DEV
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} DEV --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach DEV Smoke Test Evidence (QA Gate)
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat <<EOF > dev-smoke-test.json
          {
            "summary": {
              "result": "PASSED",
              "timestamp": "$timestamp",
              "test_suite": "Smoke Tests (ran in DEV)",
              "total_tests": 3,
              "passed": 3,
              "failed": 0,
              "duration_seconds": 12.34
            },
            "tests": [
              { "name": "API Endpoint Connectivity", "status": "PASSED", "duration_ms": 150 },
              { "name": "Database Connection", "status": "PASSED", "duration_ms": 75 },
              { "name": "Frontend Load Test", "status": "PASSED", "duration_ms": 12115 }
            ]
          }
          EOF
          jfrog evd create --predicate dev-smoke-test.json --predicate-type "https://in-toto.io/attestation/test-result/v0.1" --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} --key=${{ vars.GPG_KEY_NAME }}

      - name: Promote to QA
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} QA --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach QA Test & Jira Evidence (STAGE Gate)
        run: |
          echo '{
            "result": "PASSED",
            "duration": "125s",
            "passed": 345,
            "failed": 0,
            "skipped": 2,
            "test_suite": "QA Regression Suite (ran in QA)"
          }' > qa-test-results.json
          echo '{
            "attributes": [
              {
                "name": "jira_integration",
                "value": {
                  "server_url": "https://bookverse.atlassian.net",
                  "query": "fixVersion = ${{ needs.build-and-publish.outputs.version }} AND status in (Resolved, Closed)",
                  "issues_found": 2,
                  "issues": [
                    { "key": "BOOK-101", "summary": "UI glitch on checkout page for large orders", "status": "Closed", "priority": "High" },
                    { "key": "BOOK-105", "summary": "API returns 500 error when book stock is zero", "status": "Resolved", "priority": "Medium" }
                  ]
                }
              }
            ]
          }' > qa-jira-issues.json
          jfrog evd create --predicate qa-test-results.json --predicate-type "https://in-toto.io/attestation/test-result/v0.1" --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} --key=${{ vars.GPG_KEY_NAME }}
          jfrog evd create --predicate qa-jira-issues.json --predicate-type "https://in-toto.io/attestation/scai/attribute-report" --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} --key=${{ vars.GPG_KEY_NAME }}

      - name: Promote to STAGE
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} STAGE --promotion-type=move --include-repos=bookverse-docker-internal

      - name: Create and Attach STAGE Sign-off & Trace Evidence (PROD Gate)
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat <<EOF > stage-signoff.json
          {
            "attributes": [
              { "name": "quality_gate_passed", "value": true },
              { "name": "approved_by", "value": "product-manager@bookverse.com" },
              { "name": "approval_date", "value": "$timestamp" }
            ]
          }
          EOF
          echo '{
            "trace_id": "trace-xyz-9876",
            "environment": "STAGE",
            "status": "SUCCESS",
            "duration": "7200s",
            "details": "Application ran successfully under load test in staging environment."
          }' > stage-runtime-trace.json
          jfrog evd create --predicate stage-signoff.json --predicate-type "https://in-toto.io/attestation/scai/attribute-report" --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} --key=${{ vars.GPG_KEY_NAME }}
          jfrog evd create --predicate stage-runtime-trace.json --predicate-type "https://in-toto.io/attestation/runtime-trace/v0.1" --release-bundle ${{ github.event.repository.name }} --release-bundle-version ${{ needs.build-and-publish.outputs.version }} --key=${{ vars.GPG_KEY_NAME }}

      - name: Promote to PROD
        run: |
          jfrog rbp ${{ github.event.repository.name }} ${{ needs.build-and-publish.outputs.version }} PROD --promotion-type=move --include-repos=bookverse-docker-internal-prod
